#!/bin/bash

# Author: Sabuj Pattanayek (sabujp@gmail.com)
# Purpose: Gets remaining warranty information from dell.com for the system
# that this is run on. Run as root, with sudo, or dmidecode must be setuid root.
# Also needs wget or curl, tr, sed, grep, and awk. Only works with Linux due to
# it crawling /proc for other info.
# Flags: --csv : output in csv mode
#        --noheader : don't output the header line for the csv
# Version: git

find_command() {
	locations=( /usr/sbin /usr/bin /bin /sbin /usr/local/bin /usr/local/sbin )
	for dir in ${locations[@]}; do
		if [[ -e ${dir}/${1} ]]; then
			command="${dir}/$1"
			echo $command
		fi
	done
	if [[ "$2" == "required" ]]; then
		echo "Can not find $1"
		exit 1
	fi
	echo 0
}

days_remaining() {
	endDate=$(date -d "$1" +%s)
  currentDate=$(date +%s)
	echo $(( (endDate - currentDate) / (60*60*24) ))
}

# Look for needed commands
dmidecode=$(find_command dmidecode required)
get_http="$(find_command wget optional)"
if [[ $get_http == 0 ]]; then
	get_http="$(find_command curl required) -s -k"
else
	get_http="$get_http -q --no-check-certificate -O -"
fi
lspci=$(find_command lspci required)

for var in "$@"
do
	if [[ "$var" == "--csv" ]]; then
		csv=1
	fi
	if [[ "$var" == "--noheader" ]]; then
		noHeader=1
	fi
done

serial=`$dmidecode -s chassis-serial-number`
if [[ $? != 0 ]]; then
	echo "Could not get the serial number, quitting"
	exit 1
fi
model=`$dmidecode -s system-product-name`
mem=`cat /proc/meminfo | grep -i memtotal | sed 's/[ \t]\+/ /g' | sed \
	's/MemTotal: //'` 
cpuType=`cat /proc/cpuinfo | grep -i "model name" | head -1 | sed \
	's/[ \t]\+/ /g' | sed 's/model name : //'`
cpuNum=`cat /proc/cpuinfo | grep -i processor | wc -l | head -1 | sed \
	's/[ \t]\+/ /g'`
cpuMHz=`cat /proc/cpuinfo | grep -i "cpu mhz" | head -1 | awk -F' ' \
	'{print $4}' | sed 's/[ \t]\+/ /g'`
uptime=`uptime | sed 's/[ \t]\+/ /g' | sed 's/^[ \t]//'`;
lastPerson=`last | grep " :0" | head -1 | sed 's/[ \t]\+/ /g' | \
	awk '{print $1}'`
gpus=`cat /proc/driver/nvidia/gpus/*/information | grep Model | sed -e \
	's/Model: //' | sed 's/[ \t]\+/ /g' | sed 's/^[ \t]//' | tr '\n' ','`
if [[ $gpus == "" ]]; then
	gpus=`lspci | grep -i "vga compatible" | sed 's/[ \t]\+/ /g' | sed \
		's/^[ \t]//' | tr '\n' ','`
fi
hostName=`hostname`

print () {
	if [[ ! $csv ]]; then
		echo "HOSTNAME: ${hostName}"
		echo "MODEL: ${model}"
		echo "SERIAL NUMBER: ${serial}"
		echo "TOTAL MEMORY: ${mem}"
		echo "CPU TYPE: ${cpuType}"
		echo "CPU MHZ: ${cpuMHz}"
		echo "NUMBER OF LOGICAL CPUS: ${cpuNum}"
		echo "GPUS: ${gpus}"
		echo "LAST CONSOLE USER: ${lastPerson}"
		echo "UPTIME: ${uptime}"
		echo "WARRANTY DAYS REMAINING: ${daysLeft}"
	else
		if [[ ! $noHeader ]]; then
			echo "HOSTNAME;MODEL;SERIAL;MEMORY;CPU TYPE;CPU MHZ \
(possibly throttled);NUM LOGICAL CPUS;GPUS;LAST CONSOLE USER;UPTIME;\
WARRANTY DAYS REMAINING"
		fi
		echo "${hostName};${model};${serial};${mem};${cpuType};${cpuMHz};${cpuNum};\
${gpus};${lastPerson};${uptime};${daysLeft}"
	fi
}

apikeys=( "d676cf6e1e0ceb8fd14e8cb69acd812d" \
	"849e027f476027a394edd656eaef4842" )
for key in ${apikeys[@]}; do
	endDate=`$get_http "https://api.dell.com/support/v2/assetinfo/warranty/\
tags.xml?svctags=${serial}&apikey=${key}" | grep -i enddate | \
		awk -F'>' '{print $2}' | awk -F'T' '{print $1}' | tr '\n' ' ' | xargs`
	endDates=( $endDate )
	if [[ ${#endDates[@]} > 0 ]]; then
		break
	fi
done

if [[ ${#endDates[@]} == 0 ]]; then
	daysLeft='?'
else
	# Here we determine the warranty that has the greatest number of active days
	# remaining since a device might have multiple warranties. The least number of
	# days remaining on a warranty would be from when Dell started as a company
	# sometime in 1984. However, not sure if it's possible for a software warranty
	# to still be active but the hardware warranty to not be, but here we assume
	# this can't happen (since we mainly care about the hardware warranties here).
	daysLeft=$(days_remaining "Jan 1 1984")
	for endDate in ${endDates[@]}; do
		tmpDaysLeft=$(days_remaining $endDate)
		if (( $tmpDaysLeft > $daysLeft )); then
			daysLeft=$tmpDaysLeft
		fi
	done
fi

print

